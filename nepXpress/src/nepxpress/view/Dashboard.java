/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package nepxpress.view;

import javax.swing.*;
import javax.swing.Box;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import javax.imageio.ImageIO;
import java.util.List;

// Add RegisterView import to fix "cannot find symbol" error
import nepxpress.view.RegisterView;

// Add EmailUtil import to fix email notification functionality
import nepxpress.util.EmailUtil;

// Add RiderDAO and RiderInfo import to fix "cannot find symbol" error
import nepxpress.database.RiderDAO;
import nepxpress.database.RiderInfo;

/**
 *
 * @author Dev
 */
public class Dashboard extends javax.swing.JFrame {
    // Custom variables
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel dashboardContent;
    private javax.swing.JPanel branchContent;
    private javax.swing.JPanel staffListContent;
    private javax.swing.JPanel parcelsContent;
    private javax.swing.JPanel trackParcelsContent;
    private javax.swing.table.DefaultTableModel branchTableModel;
    private javax.swing.table.DefaultTableModel parcelsTableModel;
    private javax.swing.JTextField branchSearchField;
    private javax.swing.JTable branchTable;
    private javax.swing.JTable parcelsTable;
    private javax.swing.JTable staffTable;
    private javax.swing.table.DefaultTableModel staffTableModel;

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
        setupMainLayout();
        
        // Setup dashboard content first to ensure it's ready when shown
        setupDashboardContent();
        
        // Setup other content panels
        setupBranchContent();
        setupStaffListContent();
        setupParcelsContent();
        setupTrackParcelsContent();
        
        // Initialize rider approval panel
        riderApprovalContent = new JPanel();
        contentPanel.add(riderApprovalContent, "rider_approval");
        
        // Call the rider approval panel initialization once to ensure it's ready
        try {
            showRiderApprovalPanel();
        } catch (Exception e) {
            System.err.println("Error initializing rider approval panel: " + e.getMessage());
            e.printStackTrace();
        }
        
        // Show dashboard as default view
        showDashboardView();
        
        // Always maximize the window when it opens
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        
        // Add window state listener to maintain maximized state
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                if (evt.getNewState() != java.awt.Frame.MAXIMIZED_BOTH) {
                    setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
                }
            }
        });
    }

    /**
     * Explicitly shows the dashboard view
     */
    private void showDashboardView() {
        // Ensure the dashboard content is visible
        java.awt.CardLayout cardLayout = (java.awt.CardLayout) contentPanel.getLayout();
        cardLayout.show(contentPanel, "dashboard");
        
        // Make sure the content is refreshed
        dashboardContent.revalidate();
        dashboardContent.repaint();
        contentPanel.revalidate();
        contentPanel.repaint();
        
        // Highlight the dashboard button as active
        java.awt.Color primaryColor = new java.awt.Color(16, 42, 67);
        java.awt.Color activeColor = new java.awt.Color(40, 90, 130);
        
        if (branchButton != null) branchButton.setBackground(primaryColor);
        if (staffButton != null) staffButton.setBackground(primaryColor);
        if (parcelsButton != null) parcelsButton.setBackground(primaryColor);
        if (trackparcelsButton != null) trackparcelsButton.setBackground(primaryColor);
        
        if (dashboardButton != null) dashboardButton.setBackground(activeColor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        adminLabel1 = new javax.swing.JLabel();
        dashboardButton = new javax.swing.JButton();
        branchButton = new javax.swing.JButton();
        parcelsButton = new javax.swing.JButton();
        staffButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        nepXpressLabel = new javax.swing.JLabel();
        contentPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("nepXpress - Admin Dashboard");
        
        // Set minimum size to ensure content visibility
        setMinimumSize(new java.awt.Dimension(1000, 600));
        
        // Set preferred size slightly larger than minimum
        setPreferredSize(new java.awt.Dimension(1200, 700));
        
        // Make window resizable
        setResizable(true);
        
        // Set to maximize on startup
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        
        // Center the window on screen
        setLocationRelativeTo(null);

        // Add window state listener to handle minimization
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                if (evt.getNewState() == java.awt.Frame.ICONIFIED) {
                    // When minimized, store current size
                    setPreferredSize(getSize());
                } else if (evt.getNewState() == java.awt.Frame.NORMAL) {
                    // When restored, ensure minimum size
                    if (getWidth() < 1000 || getHeight() < 600) {
                        setSize(1000, 600);
                    }
                    validate();
                    repaint();
                }
            }
        });

        // Add component listener to handle resizing
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                // Ensure minimum size is maintained during resize
                int width = getWidth();
                int height = getHeight();
                boolean resize = false;
                
                if (width < 1000) {
                    width = 1000;
                    resize = true;
                }
                
                if (height < 600) {
                    height = 600;
                    resize = true;
                }
                
                if (resize) {
                    setSize(width, height);
                }
            }
        });

        // Update the content panel to use better layout constraints
        contentPanel.setLayout(new java.awt.CardLayout());
        contentPanel.setBackground(java.awt.Color.WHITE);
        contentPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        // Create sidebar - make it similar to RiderDashboard
        jPanel1.setBackground(new java.awt.Color(16, 42, 67)); // Darker blue #102A43
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));
        jPanel1.setPreferredSize(new java.awt.Dimension(250, getHeight()));
        
        // Add some space at the top
        jPanel1.add(Box.createVerticalStrut(25));
        
        // Dashboard title
        adminLabel1.setForeground(java.awt.Color.WHITE);
        adminLabel1.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 28));
        adminLabel1.setText("Admin");
        adminLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 30, 0, 0));
        adminLabel1.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
        jPanel1.add(adminLabel1);
        
        // Add more space after the title
        jPanel1.add(Box.createVerticalStrut(40));
        
        // Define colors for the sidebar
        java.awt.Color primaryColor = new java.awt.Color(16, 42, 67);    // #102A43
        java.awt.Color hoverColor = new java.awt.Color(28, 66, 98);      // Darker shade for hover
        java.awt.Color activeColor = new java.awt.Color(40, 90, 130);    // Active menu item color

        // Create the sidebar buttons with similar styling to RiderDashboard
        dashboardButton = createSidebarButton("Dashboard", primaryColor, hoverColor, activeColor);
        dashboardButton.setBackground(activeColor); // Set as active by default
        dashboardButton.addActionListener(e -> switchMainPanel("dashboard", dashboardButton));
        jPanel1.add(dashboardButton);
        jPanel1.add(Box.createVerticalStrut(10)); // Add spacing
        
        branchButton = createSidebarButton("Branch Staff", primaryColor, hoverColor, activeColor);
        branchButton.addActionListener(e -> switchMainPanel("branch", branchButton));
        jPanel1.add(branchButton);
        jPanel1.add(Box.createVerticalStrut(10)); // Add spacing
        
        // Add Staff button
        staffButton = createSidebarButton("Staff Management", primaryColor, hoverColor, activeColor);
        staffButton.addActionListener(e -> switchMainPanel("staff", staffButton));
        jPanel1.add(staffButton);
        jPanel1.add(Box.createVerticalStrut(10)); // Add spacing
        
        parcelsButton = createSidebarButton("Parcels", primaryColor, hoverColor, activeColor);
        parcelsButton.addActionListener(e -> switchMainPanel("parcels", parcelsButton));
        jPanel1.add(parcelsButton);
        jPanel1.add(Box.createVerticalStrut(10)); // Add spacing
        
        // Add Rider Approval button
        riderApprovalButton = createSidebarButton("Rider Approvals", primaryColor, hoverColor, activeColor);
        riderApprovalButton.addActionListener(e -> showRiderApprovalPanel());
        jPanel1.add(riderApprovalButton);
        jPanel1.add(Box.createVerticalStrut(10)); // Add spacing

        // Add Track Parcels button
        trackparcelsButton = createSidebarButton("Track Parcels", primaryColor, hoverColor, activeColor);
        trackparcelsButton.addActionListener(e -> switchMainPanel("trackparcels", trackparcelsButton));
        jPanel1.add(trackparcelsButton);
        jPanel1.add(Box.createVerticalStrut(10)); // Add spacing

        // Initialize persistent rider approval panel and add to CardLayout
        java.awt.Color sidebarBg = new java.awt.Color(15, 37, 55); // #0F2537
        java.awt.Color sidebarSelected = new java.awt.Color(46, 92, 122); // #2E5C7A
        java.awt.Color sidebarText = java.awt.Color.WHITE;

        dashboardButton.setBackground(sidebarSelected);
        dashboardButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        dashboardButton.setForeground(sidebarText);
        dashboardButton.setText("Dashboard");
        dashboardButton.setBorder(null);
        dashboardButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dashboardButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dashboardButton.setPreferredSize(new java.awt.Dimension(200, 45));
        dashboardButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 30, 10, 0));

        branchButton.setBackground(sidebarBg);
        branchButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        branchButton.setForeground(sidebarText);
        branchButton.setText("Branch");
        branchButton.setBorder(null);
        branchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        branchButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        branchButton.setPreferredSize(new java.awt.Dimension(200, 45));
        branchButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 30, 10, 0));

        staffButton.setBackground(sidebarBg);
        staffButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        staffButton.setForeground(sidebarText);
        staffButton.setText("Staff");
        staffButton.setBorder(null);
        staffButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        staffButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        staffButton.setPreferredSize(new java.awt.Dimension(200, 45));
        staffButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 30, 10, 0));

        parcelsButton.setBackground(sidebarBg);
        parcelsButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        parcelsButton.setForeground(sidebarText);
        parcelsButton.setText("Parcels");
        parcelsButton.setBorder(null);
        parcelsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        parcelsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        parcelsButton.setPreferredSize(new java.awt.Dimension(200, 45));
        parcelsButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 30, 10, 0));

        trackparcelsButton.setBackground(sidebarBg);
        trackparcelsButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        trackparcelsButton.setForeground(sidebarText);
        trackparcelsButton.setText("Track Parcels");
        trackparcelsButton.setBorder(null);
        trackparcelsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        trackparcelsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        trackparcelsButton.setPreferredSize(new java.awt.Dimension(200, 45));
        trackparcelsButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 30, 10, 0));
        trackparcelsButton.addActionListener(e -> switchMainPanel("trackparcels", trackparcelsButton));
        
        riderApprovalButton.setBackground(sidebarBg);
        riderApprovalButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        riderApprovalButton.setForeground(sidebarText);
        riderApprovalButton.setText("Rider Approvals");
        riderApprovalButton.setBorder(null);
        riderApprovalButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        riderApprovalButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        riderApprovalButton.setPreferredSize(new java.awt.Dimension(200, 45));
        riderApprovalButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 30, 10, 0));

        // Load and set the tracking icon
        try {
            javax.swing.ImageIcon originalIcon = new javax.swing.ImageIcon(getClass().getResource("/icons/tracking.png"));
            java.awt.Image scaledImage = originalIcon.getImage().getScaledInstance(20, 20, java.awt.Image.SCALE_SMOOTH);
            trackparcelsButton.setIcon(new javax.swing.ImageIcon(scaledImage));
        } catch (Exception e) {
            System.err.println("Error loading tracking icon: " + e.getMessage());
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dashboardButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(branchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(staffButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(parcelsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(riderApprovalButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(trackparcelsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(adminLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(adminLabel1)
                .addGap(40, 40, 40)
                .addComponent(dashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(branchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(staffButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(parcelsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(riderApprovalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(trackparcelsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(70, 119, 150));
        jPanel2.setPreferredSize(new java.awt.Dimension(jPanel2.getPreferredSize().width, 45));

        nepXpressLabel.setFont(new java.awt.Font("Segoe UI", 1, 14));
        nepXpressLabel.setForeground(new java.awt.Color(255, 255, 255));
        nepXpressLabel.setText("nepXpress");
        nepXpressLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        
        // Add welcome user label
        javax.swing.JLabel welcomeLabel = new javax.swing.JLabel("Welcome, Admin");
        welcomeLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
        welcomeLabel.setForeground(java.awt.Color.WHITE);
        welcomeLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 15, 0, 0));
        
        // Add logout button
        javax.swing.JButton logoutButton = new javax.swing.JButton("Logout");
        logoutButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12));
        logoutButton.setBackground(new java.awt.Color(220, 53, 69)); // Red color
        logoutButton.setForeground(java.awt.Color.WHITE);
        logoutButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 15, 5, 15));
        logoutButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutButton.setFocusPainted(false);
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                int confirm = javax.swing.JOptionPane.showConfirmDialog(
                    Dashboard.this, 
                    "Are you sure you want to logout?", 
                    "Confirm Logout", 
                    javax.swing.JOptionPane.YES_NO_OPTION
                );
                
                if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                    // Close the current window
                    dispose();
                    
                    // Show login screen instead of exiting the application
                    new RegisterView().setVisible(true);
                }
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nepXpressLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoutButton)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nepXpressLabel)
                    .addComponent(welcomeLabel)
                    .addComponent(logoutButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        contentPanel.setLayout(new java.awt.CardLayout());
        contentPanel.setBackground(java.awt.Color.WHITE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 
                    javax.swing.GroupLayout.DEFAULT_SIZE, 
                    javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 
                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 
                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 
                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 
                    javax.swing.GroupLayout.DEFAULT_SIZE, 
                    javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 
                    javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void setupMainLayout() {
        // Setup cardlayout content panel
        contentPanel.removeAll();
        contentPanel.setLayout(new java.awt.CardLayout());
        
        java.awt.CardLayout cardLayout = (java.awt.CardLayout) contentPanel.getLayout();
        
        javax.swing.JPanel container = new javax.swing.JPanel(new java.awt.BorderLayout());
        container.add(jPanel1, java.awt.BorderLayout.WEST);
        container.add(jPanel2, java.awt.BorderLayout.NORTH);
        container.add(contentPanel, java.awt.BorderLayout.CENTER);
        
        // Set main content pane
        setContentPane(container);
        
        // Ensure dashboard button is active
        java.awt.Color primaryColor = new java.awt.Color(16, 42, 67);    // #102A43
        java.awt.Color activeColor = new java.awt.Color(40, 90, 130);    // Active menu item color
        
        // Reset all button colors
        if (branchButton != null) branchButton.setBackground(primaryColor);
        if (staffButton != null) staffButton.setBackground(primaryColor);
        if (parcelsButton != null) parcelsButton.setBackground(primaryColor);
        if (trackparcelsButton != null) trackparcelsButton.setBackground(primaryColor);
        
        // Set dashboard button as active
        if (dashboardButton != null) dashboardButton.setBackground(activeColor);
    }

    private void setupDashboardContent() {
        // Create dashboard panel
        dashboardContent = new javax.swing.JPanel();
        dashboardContent.setLayout(new java.awt.BorderLayout(0, 0));
        dashboardContent.setBackground(java.awt.Color.WHITE);
        
        // Create main content panel
        javax.swing.JPanel mainContent = new javax.swing.JPanel();
        mainContent.setLayout(new java.awt.BorderLayout());
        mainContent.setBackground(java.awt.Color.WHITE);
        mainContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(30, 0, 0, 0));
        
        // Add title panel with "Home"
        javax.swing.JPanel titlePanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));
        titlePanel.setBackground(java.awt.Color.WHITE);
        javax.swing.JLabel titleLabel = new javax.swing.JLabel("Home");
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 32));
        titlePanel.add(titleLabel);
        titlePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(200, 200, 200)),
            javax.swing.BorderFactory.createEmptyBorder(20, 30, 10, 30)
        ));
        
        // Create wrapper panel with BorderLayout for better scaling
        javax.swing.JPanel wrapperPanel = new javax.swing.JPanel();
        wrapperPanel.setLayout(new java.awt.BorderLayout());
        wrapperPanel.setBackground(java.awt.Color.WHITE);
        
        // Create center panel to hold cards with FlowLayout
        javax.swing.JPanel centerPanel = new javax.swing.JPanel();
        centerPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 20));
        centerPanel.setBackground(java.awt.Color.WHITE);
        centerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 20, 30));
        
        // Create cards panel with GridLayout
        javax.swing.JPanel cardsPanel = new javax.swing.JPanel();
        cardsPanel.setLayout(new java.awt.GridLayout(2, 3, 30, 30));
        cardsPanel.setBackground(java.awt.Color.WHITE);
        
        // Add cards with data
        addStatCard(cardsPanel, "Total Branches", "3", null);
        addStatCard(cardsPanel, "Staff", "50", null);
        addStatCard(cardsPanel, "Total Parcels", "10", null);
        addStatCard(cardsPanel, "Delivered", "8", null);
        addStatCard(cardsPanel, "In-Transit", "2", null);
        addStatCard(cardsPanel, "Shipped", "5", null);
        
        // Add cards panel to center panel
        centerPanel.add(cardsPanel);
        
        // Add center panel to wrapper
        wrapperPanel.add(centerPanel, java.awt.BorderLayout.CENTER);
        
        // Create scroll pane for responsiveness
        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(wrapperPanel);
        scrollPane.setBorder(null);
        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        
        // Add components to main content
        mainContent.add(titlePanel, java.awt.BorderLayout.NORTH);
        mainContent.add(scrollPane, java.awt.BorderLayout.CENTER);
        
        // Add main content to dashboard content
        dashboardContent.add(mainContent, java.awt.BorderLayout.CENTER);
        
        // Force validation and repaint to ensure content is displayed
        dashboardContent.revalidate();
        dashboardContent.repaint();
        
        // Add dashboard content to the cardlayout
        contentPanel.add(dashboardContent, "dashboard");
    }

    private void addStatCard(javax.swing.JPanel parent, String title, String value, String iconPath) {
        // Create card panel with more attractive styling
        javax.swing.JPanel card = new javax.swing.JPanel();
        card.setLayout(new java.awt.BorderLayout(10, 5));
        card.setBackground(java.awt.Color.WHITE);
        card.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createLineBorder(new java.awt.Color(63, 124, 172), 1),
            javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20)
        ));
        card.setPreferredSize(new java.awt.Dimension(250, 120));
        
        // Create value label with larger font
        javax.swing.JLabel valueLabel = new javax.swing.JLabel(value);
        valueLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 36));
        valueLabel.setForeground(new java.awt.Color(30, 57, 76));
        
        // Create title label with smaller font
        javax.swing.JLabel titleLabel = new javax.swing.JLabel(title);
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        titleLabel.setForeground(new java.awt.Color(88, 88, 88));
        
        // Add hover effect
        card.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                card.setBorder(javax.swing.BorderFactory.createCompoundBorder(
                    javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 92, 162), 2),
                    javax.swing.BorderFactory.createEmptyBorder(19, 19, 19, 19)
                ));
            }
            
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                card.setBorder(javax.swing.BorderFactory.createCompoundBorder(
                    javax.swing.BorderFactory.createLineBorder(new java.awt.Color(63, 124, 172), 1),
                    javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20)
                ));
            }
        });
        
        // Add components to card
        card.add(valueLabel, java.awt.BorderLayout.NORTH);
        card.add(titleLabel, java.awt.BorderLayout.CENTER);
        
        parent.add(card);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adminLabel1;
    private javax.swing.JButton branchButton;
    private javax.swing.JButton dashboardButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel nepXpressLabel;
    private javax.swing.JButton parcelsButton;
    private javax.swing.JButton riderApprovalButton;
    private javax.swing.JButton trackparcelsButton;
    private javax.swing.JButton staffButton;
    // End of variables declaration//GEN-END:variables

    private void setupBranchContent() {
        // Create branch panel
        branchContent = new javax.swing.JPanel();
        branchContent.setLayout(new java.awt.BorderLayout(0, 0));
        branchContent.setBackground(java.awt.Color.WHITE);
        
        // Create main content panel
        javax.swing.JPanel mainContent = new javax.swing.JPanel();
        mainContent.setLayout(new java.awt.BorderLayout());
        mainContent.setBackground(java.awt.Color.WHITE);
        mainContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(30, 0, 0, 0));
        
        // Create title panel
        javax.swing.JPanel titlePanel = new javax.swing.JPanel();
        titlePanel.setLayout(new java.awt.BorderLayout());
        titlePanel.setBackground(java.awt.Color.WHITE);
        titlePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 30, 0, 30));
        
        // Add title "Branch Locations"
        javax.swing.JLabel titleLabel = new javax.swing.JLabel("Branch Locations");
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 32));
        titlePanel.add(titleLabel);
        
        // Add separator below title
        titlePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(200, 200, 200)),
            javax.swing.BorderFactory.createEmptyBorder(0, 0, 20, 0)
        ));
        
        // Create controls panel
        javax.swing.JPanel controlsPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        controlsPanel.setBackground(java.awt.Color.WHITE);
        controlsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 20, 30));
        
        // Left side - Show entries
        javax.swing.JPanel leftControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        leftControls.setBackground(java.awt.Color.WHITE);
        leftControls.add(new javax.swing.JLabel("Show"));
        javax.swing.JComboBox<String> entriesCombo = new javax.swing.JComboBox<>(new String[]{"10", "25", "50", "100"});
        entriesCombo.setPreferredSize(new java.awt.Dimension(70, 25));
        leftControls.add(entriesCombo);
        leftControls.add(new javax.swing.JLabel("entries"));
        
        // Right side - Search box
        javax.swing.JPanel rightControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        rightControls.setBackground(java.awt.Color.WHITE);
        branchSearchField = new javax.swing.JTextField(20);
        branchSearchField.setPreferredSize(new java.awt.Dimension(200, 25));
        rightControls.add(new javax.swing.JLabel("Search:"));
        rightControls.add(branchSearchField);

        // Add New button
        javax.swing.JButton addNewButton = new javax.swing.JButton("+ Add New");
        addNewButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        addNewButton.setBackground(new java.awt.Color(0, 123, 255));
        addNewButton.setForeground(java.awt.Color.WHITE);
        addNewButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        addNewButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAddBranchDialog();
            }
        });
        rightControls.add(addNewButton);

        // Add search functionality
        branchSearchField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            public void changedUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void removeUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void insertUpdate(javax.swing.event.DocumentEvent e) { search(); }

            public void search() {
                String searchText = branchSearchField.getText().toLowerCase();
                javax.swing.table.TableRowSorter<javax.swing.table.DefaultTableModel> sorter = 
                    new javax.swing.table.TableRowSorter<>(branchTableModel);
                branchTable.setRowSorter(sorter);
                
                if (searchText.length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + searchText));
                }
            }
        });
        
        controlsPanel.add(leftControls, java.awt.BorderLayout.WEST);
        controlsPanel.add(rightControls, java.awt.BorderLayout.EAST);
        
        // Create table panel
        javax.swing.JPanel tablePanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        tablePanel.setBackground(java.awt.Color.WHITE);
        tablePanel.setBorder(null);
        
        // Create table model with column names
        String[] columnNames = {"#", "Branch Code", "Branch Name", "Location", "Contact Number", "Email", "Action"};
        
        // Load branch data from database
        java.util.List<nepxpress.model.Branch> branches = new java.util.ArrayList<>();
        try {
            nepxpress.dao.BranchDAO branchDAO = new nepxpress.dao.BranchDAO();
            branches = branchDAO.getAllBranches();
        } catch (Exception e) {
            System.err.println("Error loading branches: " + e.getMessage());
            e.printStackTrace();
        }
        
        // Create data array for table
        Object[][] data = new Object[branches.size()][columnNames.length];
        for (int i = 0; i < branches.size(); i++) {
            nepxpress.model.Branch branch = branches.get(i);
            data[i][0] = i + 1;  // Index
            data[i][1] = branch.getBranchCode();
            data[i][2] = branch.getBranchName();
            data[i][3] = branch.getLocation();
            data[i][4] = branch.getContactNumber();
            data[i][5] = branch.getEmail();
            data[i][6] = "";  // Action column
        }
        
        branchTableModel = new javax.swing.table.DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 6; // Only allow editing the action column
            }
        };
        
        // Create table
        branchTable = new javax.swing.JTable(branchTableModel);
        branchTable.setRowHeight(40);
        branchTable.setShowGrid(false);
        branchTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        branchTable.getTableHeader().setBackground(java.awt.Color.WHITE);
        branchTable.getTableHeader().setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12));
        branchTable.setBorder(null);
        
        // Set custom renderer and editor for action column
        branchTable.getColumnModel().getColumn(6).setCellRenderer(new BranchActionColumnRenderer());
        branchTable.getColumnModel().getColumn(6).setCellEditor(new BranchActionColumnEditor());
        
        // Add table to scroll pane
        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(branchTable);
        scrollPane.setBorder(null);
        scrollPane.setBackground(java.awt.Color.WHITE);
        scrollPane.getViewport().setBackground(java.awt.Color.WHITE);
        tablePanel.add(scrollPane);
        
        // Create footer panel
        javax.swing.JPanel footerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        footerPanel.setBackground(java.awt.Color.WHITE);
        footerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 30, 30));
        
        // Add showing entries text
        javax.swing.JLabel showingLabel = new javax.swing.JLabel("Showing 1 to " + branches.size() + " of " + branches.size() + " entries");
        footerPanel.add(showingLabel, java.awt.BorderLayout.WEST);
        
        // Add pagination
        javax.swing.JPanel paginationPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        paginationPanel.setBackground(java.awt.Color.WHITE);
        
        javax.swing.JButton prevButton = new javax.swing.JButton("Previous");
        prevButton.setEnabled(false);
        
        javax.swing.JButton pageButton = new javax.swing.JButton("1");
        pageButton.setBackground(new java.awt.Color(0, 123, 255));
        pageButton.setForeground(java.awt.Color.WHITE);
        
        javax.swing.JButton nextButton = new javax.swing.JButton("Next");
        nextButton.setEnabled(false);
        
        paginationPanel.add(prevButton);
        paginationPanel.add(pageButton);
        paginationPanel.add(nextButton);
        
        footerPanel.add(paginationPanel, java.awt.BorderLayout.EAST);
        
        // Create center panel
        javax.swing.JPanel centerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        centerPanel.setBackground(java.awt.Color.WHITE);
        centerPanel.add(controlsPanel, java.awt.BorderLayout.NORTH);
        centerPanel.add(tablePanel, java.awt.BorderLayout.CENTER);
        centerPanel.add(footerPanel, java.awt.BorderLayout.SOUTH);
        
        // Update the final assembly
        mainContent.add(titlePanel, java.awt.BorderLayout.NORTH);
        mainContent.add(centerPanel, java.awt.BorderLayout.CENTER);
        branchContent.add(mainContent, java.awt.BorderLayout.CENTER);
        
        // Add branch content to main content panel
        contentPanel.add(branchContent, "branch");
    }

    private void setupStaffListContent() {
        // Create staff list panel
        staffListContent = new javax.swing.JPanel();
        staffListContent.setLayout(new java.awt.BorderLayout(0, 0));
        staffListContent.setBackground(java.awt.Color.WHITE);
        
        // Create main content panel
        javax.swing.JPanel mainContent = new javax.swing.JPanel();
        mainContent.setLayout(new java.awt.BorderLayout());
        mainContent.setBackground(java.awt.Color.WHITE);
        mainContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(30, 0, 0, 0));
        
        // Create title panel
        javax.swing.JPanel titlePanel = new javax.swing.JPanel();
        titlePanel.setLayout(new java.awt.BorderLayout());
        titlePanel.setBackground(java.awt.Color.WHITE);
        titlePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 30, 0, 30));
        
        // Add title "Staff Management"
        javax.swing.JLabel titleLabel = new javax.swing.JLabel("Staff Management");
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 32));
        titlePanel.add(titleLabel);
        
        // Add separator below title
        titlePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(200, 200, 200)),
            javax.swing.BorderFactory.createEmptyBorder(0, 0, 20, 0)
        ));
        
        // Create controls panel
        javax.swing.JPanel controlsPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        controlsPanel.setBackground(java.awt.Color.WHITE);
        controlsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 20, 30));
        
        // Left side - Show entries
        javax.swing.JPanel leftControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        leftControls.setBackground(java.awt.Color.WHITE);
        leftControls.add(new javax.swing.JLabel("Show"));
        javax.swing.JComboBox<String> entriesCombo = new javax.swing.JComboBox<>(new String[]{"10", "25", "50", "100"});
        entriesCombo.setPreferredSize(new java.awt.Dimension(70, 25));
        leftControls.add(entriesCombo);
        leftControls.add(new javax.swing.JLabel("entries"));
        
        // Right side - Search box
        javax.swing.JPanel rightControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        rightControls.setBackground(java.awt.Color.WHITE);
        javax.swing.JTextField searchField = new javax.swing.JTextField(20);
        searchField.setPreferredSize(new java.awt.Dimension(200, 25));
        rightControls.add(new javax.swing.JLabel("Search:"));
        rightControls.add(searchField);

        // Add New button
        javax.swing.JButton addNewButton = new javax.swing.JButton("+ Add New");
        addNewButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        addNewButton.setBackground(new java.awt.Color(0, 123, 255));
        addNewButton.setForeground(java.awt.Color.WHITE);
        addNewButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        addNewButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAddStaffDialog();
            }
        });
        rightControls.add(addNewButton);

        // Add search functionality
        searchField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            public void changedUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void removeUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void insertUpdate(javax.swing.event.DocumentEvent e) { search(); }

            public void search() {
                String searchText = searchField.getText().toLowerCase();
                javax.swing.table.TableRowSorter<javax.swing.table.DefaultTableModel> sorter = 
                    new javax.swing.table.TableRowSorter<>(staffTableModel);
                staffTable.setRowSorter(sorter);
                
                if (searchText.length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + searchText));
                }
            }
        });
        
        controlsPanel.add(leftControls, java.awt.BorderLayout.WEST);
        controlsPanel.add(rightControls, java.awt.BorderLayout.EAST);
        
        // Create table panel
        javax.swing.JPanel tablePanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        tablePanel.setBackground(java.awt.Color.WHITE);
        tablePanel.setBorder(null);
        
        // Create table model with column names
        String[] columnNames = {"#", "Staff ID", "First Name", "Last Name", "Email", "Phone", "Branch", "Role", "Action"};
        
        // Load staff data from database
        java.util.List<nepxpress.model.Staff> staffList = new java.util.ArrayList<>();
        try {
            nepxpress.dao.StaffDAO staffDAO = new nepxpress.dao.StaffDAO();
            staffList = staffDAO.getAllStaff();
        } catch (Exception e) {
            System.err.println("Error loading staff: " + e.getMessage());
            e.printStackTrace();
        }
        
        // Create data array for table
        Object[][] data = new Object[staffList.size()][columnNames.length];
        for (int i = 0; i < staffList.size(); i++) {
            nepxpress.model.Staff staff = staffList.get(i);
            data[i][0] = i + 1;  // Index
            data[i][1] = staff.getStaffId();
            data[i][2] = staff.getFirstName();
            data[i][3] = staff.getLastName();
            data[i][4] = staff.getEmail();
            data[i][5] = staff.getPhone();
            data[i][6] = staff.getBranchName();
            data[i][7] = staff.getRole();
            data[i][8] = "";  // Action column
        }
        
        staffTableModel = new javax.swing.table.DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 8; // Only allow editing the action column
            }
        };
        
        // Create table
        staffTable = new javax.swing.JTable(staffTableModel);
        staffTable.setRowHeight(40);
        staffTable.setShowGrid(false);
        staffTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        staffTable.getTableHeader().setBackground(java.awt.Color.WHITE);
        staffTable.getTableHeader().setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12));
        staffTable.setBorder(null);
        
        // Set custom renderer and editor for action column
        staffTable.getColumnModel().getColumn(8).setCellRenderer(new StaffActionColumnRenderer());
        staffTable.getColumnModel().getColumn(8).setCellEditor(new StaffActionColumnEditor());
        
        // Add table to scroll pane
        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(staffTable);
        scrollPane.setBorder(null);
        scrollPane.setBackground(java.awt.Color.WHITE);
        scrollPane.getViewport().setBackground(java.awt.Color.WHITE);
        tablePanel.add(scrollPane);
        
        // Create footer panel
        javax.swing.JPanel footerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        footerPanel.setBackground(java.awt.Color.WHITE);
        footerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 30, 30));
        
        // Add showing entries text
        javax.swing.JLabel showingLabel = new javax.swing.JLabel("Showing 1 to " + staffList.size() + " of " + staffList.size() + " entries");
        footerPanel.add(showingLabel, java.awt.BorderLayout.WEST);
        
        // Add pagination
        javax.swing.JPanel paginationPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        paginationPanel.setBackground(java.awt.Color.WHITE);
        
        javax.swing.JButton prevButton = new javax.swing.JButton("Previous");
        prevButton.setEnabled(false);
        
        javax.swing.JButton pageButton = new javax.swing.JButton("1");
        pageButton.setBackground(new java.awt.Color(0, 123, 255));
        pageButton.setForeground(java.awt.Color.WHITE);
        
        javax.swing.JButton nextButton = new javax.swing.JButton("Next");
        nextButton.setEnabled(false);
        
        paginationPanel.add(prevButton);
        paginationPanel.add(pageButton);
        paginationPanel.add(nextButton);
        
        footerPanel.add(paginationPanel, java.awt.BorderLayout.EAST);
        
        // Create center panel
        javax.swing.JPanel centerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        centerPanel.setBackground(java.awt.Color.WHITE);
        centerPanel.add(controlsPanel, java.awt.BorderLayout.NORTH);
        centerPanel.add(tablePanel, java.awt.BorderLayout.CENTER);
        centerPanel.add(footerPanel, java.awt.BorderLayout.SOUTH);
        
        // Update the final assembly
        mainContent.add(titlePanel, java.awt.BorderLayout.NORTH);
        mainContent.add(centerPanel, java.awt.BorderLayout.CENTER);
        staffListContent.add(mainContent, java.awt.BorderLayout.CENTER);
        
        // Add staff list content to main content panel
        contentPanel.add(staffListContent, "staff");
    }

    private void setupParcelsContent() {
        // Create parcels panel
        parcelsContent = new javax.swing.JPanel();
        parcelsContent.setLayout(new java.awt.BorderLayout(0, 0));
        parcelsContent.setBackground(java.awt.Color.WHITE);
        
        // Create main content panel
        javax.swing.JPanel mainContent = new javax.swing.JPanel();
        mainContent.setLayout(new java.awt.BorderLayout());
        mainContent.setBackground(java.awt.Color.WHITE);
        mainContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(30, 0, 0, 0));
        
        // Create title panel
        javax.swing.JPanel titlePanel = new javax.swing.JPanel();
        titlePanel.setLayout(new java.awt.BorderLayout());
        titlePanel.setBackground(java.awt.Color.WHITE);
        titlePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 30, 0, 30));
        
        // Add title "Parcels"
        javax.swing.JLabel titleLabel = new javax.swing.JLabel("Parcels");
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 32));
        titlePanel.add(titleLabel);
        
        // Add separator below title
        titlePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(200, 200, 200)),
            javax.swing.BorderFactory.createEmptyBorder(0, 0, 20, 0)
        ));
        
        // Create controls panel
        javax.swing.JPanel controlsPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        controlsPanel.setBackground(java.awt.Color.WHITE);
        controlsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 20, 30));
        
        // Left side - Show entries
        javax.swing.JPanel leftControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        leftControls.setBackground(java.awt.Color.WHITE);
        leftControls.add(new javax.swing.JLabel("Show"));
        javax.swing.JComboBox<String> entriesCombo = new javax.swing.JComboBox<>(new String[]{"10", "25", "50", "100"});
        entriesCombo.setPreferredSize(new java.awt.Dimension(70, 25));
        leftControls.add(entriesCombo);
        leftControls.add(new javax.swing.JLabel("entries"));
        
        // Right side - Search box
        javax.swing.JPanel rightControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        rightControls.setBackground(java.awt.Color.WHITE);
        javax.swing.JTextField searchField = new javax.swing.JTextField(20);
        searchField.setPreferredSize(new java.awt.Dimension(200, 25));
        rightControls.add(new javax.swing.JLabel("Search:"));
        rightControls.add(searchField);

        // Add New button
        javax.swing.JButton addNewButton = new javax.swing.JButton("+ Add New");
        addNewButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        addNewButton.setBackground(new java.awt.Color(0, 123, 255));
        addNewButton.setForeground(java.awt.Color.WHITE);
        addNewButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        addNewButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAddParcelDialog();
            }
        });
        rightControls.add(addNewButton);

        // Add search functionality
        searchField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            public void changedUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void removeUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void insertUpdate(javax.swing.event.DocumentEvent e) { search(); }

            public void search() {
                String searchText = searchField.getText().toLowerCase();
                javax.swing.table.TableRowSorter<javax.swing.table.DefaultTableModel> sorter = 
                    new javax.swing.table.TableRowSorter<>(parcelsTableModel);
                parcelsTable.setRowSorter(sorter);
                
                if (searchText.length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + searchText));
                }
            }
        });
        
        controlsPanel.add(leftControls, java.awt.BorderLayout.WEST);
        controlsPanel.add(rightControls, java.awt.BorderLayout.EAST);
        
        // Create table panel
        javax.swing.JPanel tablePanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        tablePanel.setBackground(java.awt.Color.WHITE);
        tablePanel.setBorder(null);
        
        // Create table model with column names
        String[] columnNames = {"#", "Reference Number", "Sender", "Recipient", "Status", "Action"};
        Object[][] data = {
            {1, "PCL001", "John Doe", "Jane Smith", "In Transit", ""},
            {2, "PCL002", "Bob Johnson", "Alice Brown", "Delivered", ""},
            {3, "PCL003", "Sarah Wilson", "Mike Davis", "Pending", ""}
        };
        
        parcelsTableModel = new javax.swing.table.DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 5; // Only allow editing the action column
            }
        };
        
        // Create table
        parcelsTable = new javax.swing.JTable(parcelsTableModel);
        parcelsTable.setRowHeight(40);
        parcelsTable.setShowGrid(false);
        parcelsTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        parcelsTable.getTableHeader().setBackground(java.awt.Color.WHITE);
        parcelsTable.getTableHeader().setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12));
        parcelsTable.setBorder(null);
        
        // Set custom renderer and editor for action column
        parcelsTable.getColumnModel().getColumn(5).setCellRenderer(new ParcelActionColumnRenderer());
        parcelsTable.getColumnModel().getColumn(5).setCellEditor(new ParcelActionColumnEditor());
        
        // Add table to scroll pane
        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(parcelsTable);
        scrollPane.setBorder(null);
        scrollPane.setBackground(java.awt.Color.WHITE);
        scrollPane.getViewport().setBackground(java.awt.Color.WHITE);
        tablePanel.add(scrollPane);
        
        // Create footer panel
        javax.swing.JPanel footerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        footerPanel.setBackground(java.awt.Color.WHITE);
        footerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 30, 30));
        
        // Add showing entries text
        javax.swing.JLabel showingLabel = new javax.swing.JLabel("Showing 1 to 3 of 3 entries");
        footerPanel.add(showingLabel, java.awt.BorderLayout.WEST);
        
        // Add pagination
        javax.swing.JPanel paginationPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        paginationPanel.setBackground(java.awt.Color.WHITE);
        
        javax.swing.JButton prevButton = new javax.swing.JButton("Previous");
        prevButton.setEnabled(false);
        
        javax.swing.JButton pageButton = new javax.swing.JButton("1");
        pageButton.setBackground(new java.awt.Color(0, 123, 255));
        pageButton.setForeground(java.awt.Color.WHITE);
        
        javax.swing.JButton nextButton = new javax.swing.JButton("Next");
        nextButton.setEnabled(false);
        
        paginationPanel.add(prevButton);
        paginationPanel.add(pageButton);
        paginationPanel.add(nextButton);
        
        footerPanel.add(paginationPanel, java.awt.BorderLayout.EAST);
        
        // Create center panel
        javax.swing.JPanel centerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        centerPanel.setBackground(java.awt.Color.WHITE);
        centerPanel.add(controlsPanel, java.awt.BorderLayout.NORTH);
        centerPanel.add(tablePanel, java.awt.BorderLayout.CENTER);
        centerPanel.add(footerPanel, java.awt.BorderLayout.SOUTH);
        
        // Update the final assembly
        mainContent.add(titlePanel, java.awt.BorderLayout.NORTH);
        mainContent.add(centerPanel, java.awt.BorderLayout.CENTER);
        parcelsContent.add(mainContent, java.awt.BorderLayout.CENTER);
        
        // Add parcels content to main content panel
        contentPanel.add(parcelsContent, "parcels");
    }

    private javax.swing.JPanel createActionButtons() {
        javax.swing.JPanel actionPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        actionPanel.setBackground(java.awt.Color.WHITE);

        // Create Edit button
        javax.swing.JButton editButton = new javax.swing.JButton("Edit");
        editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        editButton.setBackground(new java.awt.Color(0, 123, 255));
        editButton.setForeground(java.awt.Color.WHITE);
        editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        // Create Delete button
        javax.swing.JButton deleteButton = new javax.swing.JButton("Delete");
        deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        deleteButton.setBackground(new java.awt.Color(220, 53, 69));
        deleteButton.setForeground(java.awt.Color.WHITE);
        deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        actionPanel.add(editButton);
        actionPanel.add(deleteButton);

        return actionPanel;
    }

    private class BranchActionColumnRenderer implements javax.swing.table.TableCellRenderer {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public BranchActionColumnRenderer() {
            panel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            panel.add(editButton);
            panel.add(deleteButton);
        }

        @Override
        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            return panel;
        }
    }

    private class BranchActionColumnEditor extends javax.swing.AbstractCellEditor implements javax.swing.table.TableCellEditor {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public BranchActionColumnEditor() {
            panel = new javax.swing.JPanel();
            panel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            editButton.addActionListener(e -> {
                    int row = branchTable.getSelectedRow();
                    if (row != -1) {
                        row = branchTable.convertRowIndexToModel(row);
                        showEditBranchDialog(row);
                    }
                fireEditingStopped();
            });

            deleteButton.addActionListener(e -> {
                    int row = branchTable.getSelectedRow();
                    if (row != -1) {
                        row = branchTable.convertRowIndexToModel(row);
                    
                    // Get branch code from table model
                    String branchCode = (String) branchTableModel.getValueAt(row, 1);
                    
                    // Confirm deletion
                        int confirm = javax.swing.JOptionPane.showConfirmDialog(
                            Dashboard.this,
                            "Are you sure you want to delete this branch?",
                        "Confirm Deletion",
                            javax.swing.JOptionPane.YES_NO_OPTION,
                            javax.swing.JOptionPane.WARNING_MESSAGE
                        );
                        
                        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                        // Delete from database
                        nepxpress.dao.BranchDAO branchDAO = new nepxpress.dao.BranchDAO();
                        nepxpress.model.Branch branch = branchDAO.getBranchByCode(branchCode);
                        
                        if (branch != null) {
                            boolean deleted = branchDAO.deleteBranch(branch.getId());
                            
                            if (deleted) {
                                // Remove from table model
                            branchTableModel.removeRow(row);
                                
                            // Update row numbers
                            for (int i = 0; i < branchTableModel.getRowCount(); i++) {
                                branchTableModel.setValueAt(i + 1, i, 0);
                            }
                                
                            javax.swing.JOptionPane.showMessageDialog(
                                Dashboard.this,
                                "Branch deleted successfully!",
                                "Success",
                                javax.swing.JOptionPane.INFORMATION_MESSAGE
                            );
                            } else {
                                javax.swing.JOptionPane.showMessageDialog(
                                    Dashboard.this,
                                    "Failed to delete branch. It may be in use.",
                                    "Error",
                                    javax.swing.JOptionPane.ERROR_MESSAGE
                                );
                            }
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(
                                Dashboard.this,
                                "Branch not found in database.",
                                "Error",
                                javax.swing.JOptionPane.ERROR_MESSAGE
                            );
                            
                            // Still remove from table if not in database
                            branchTableModel.removeRow(row);
                            
                            // Update row numbers
                            for (int i = 0; i < branchTableModel.getRowCount(); i++) {
                                branchTableModel.setValueAt(i + 1, i, 0);
                            }
                        }
                    }
                }
                fireEditingStopped();
            });

            panel.add(editButton);
            panel.add(deleteButton);
        }

        @Override
        public java.awt.Component getTableCellEditorComponent(javax.swing.JTable table, Object value,
                boolean isSelected, int row, int column) {
            return panel;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
    }

    private void showEditBranchDialog(int row) {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Edit Branch", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {"Branch Code:", "Street/Building/Brgy:", "City:", "State/Province:", "ZIP Code:", "Country:", "Contact Number:"};
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length];
        
        // Branch Code (disabled)
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new javax.swing.JLabel(labels[0]), gbc);
        
        gbc.gridx = 1;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        fields[0] = new javax.swing.JTextField(branchTableModel.getValueAt(row, 1).toString());
        fields[0].setEnabled(false);
        mainPanel.add(fields[0], gbc);
        
        // Get address parts
        String[] addressParts = branchTableModel.getValueAt(row, 3).toString().split(", ");
        String city = addressParts[0];
        String state = addressParts[1];
        String zip = addressParts[2];
        
        // Other fields
        String[] values = {
            "", // Branch Code already added
            branchTableModel.getValueAt(row, 2).toString(), // Street
            city,
            state,
            zip,
            branchTableModel.getValueAt(row, 4).toString(), // Country
            branchTableModel.getValueAt(row, 5).toString()  // Contact
        };
        
        for (int i = 1; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i] = new javax.swing.JTextField(values[i]);
            mainPanel.add(fields[i], gbc);
        }
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate fields
                for (int i = 1; i < fields.length; i++) {  // Skip branch code
                    String value = fields[i].getText().trim();
                    if (value.isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                            "All fields are required.",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                // Validate phone number
                String phone = fields[6].getText().trim();
                if (!validatePhoneNumber(phone)) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Contact number must be exactly 10 digits.",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Update row in table
                branchTableModel.setValueAt(fields[1].getText(), row, 2); // Street
                branchTableModel.setValueAt(
                    fields[2].getText() + ", " + fields[3].getText() + ", " + fields[4].getText(),
                    row, 3
                ); // City, State, ZIP
                branchTableModel.setValueAt(fields[5].getText(), row, 4); // Country
                branchTableModel.setValueAt(fields[6].getText(), row, 5); // Contact
                
                // Close dialog
                dialog.dispose();
                
                // Show success message
                javax.swing.JOptionPane.showMessageDialog(Dashboard.this,
                    "Branch updated successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private void showAddBranchDialog() {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Add New Branch", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {
            "Branch Code:", 
            "Branch Name:", 
            "Location:", 
            "Contact Number:", 
            "Email:"
        };
        
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length];
        
        // Branch Code (auto-generated and disabled)
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new javax.swing.JLabel(labels[0]), gbc);
        
        gbc.gridx = 1;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        fields[0] = new javax.swing.JTextField(generateBranchCode());
        fields[0].setEnabled(false);
        mainPanel.add(fields[0], gbc);
        
        // Other text fields
        for (int i = 1; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i] = new javax.swing.JTextField(20);
            mainPanel.add(fields[i], gbc);
        }
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate input
                if (fields[1].getText().isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Branch name is required",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                
                if (fields[2].getText().isEmpty()) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Location is required",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (fields[3].getText().isEmpty()) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Contact number is required",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (fields[4].getText().isEmpty() || !fields[4].getText().contains("@")) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Please enter a valid email address",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Create Branch object
                nepxpress.model.Branch branch = new nepxpress.model.Branch();
                branch.setBranchCode(fields[0].getText());
                branch.setBranchName(fields[1].getText());
                branch.setLocation(fields[2].getText());
                branch.setContactNumber(fields[3].getText());
                branch.setEmail(fields[4].getText());
                
                // Save to database
                nepxpress.dao.BranchDAO branchDAO = new nepxpress.dao.BranchDAO();
                int branchId = branchDAO.insertBranch(branch);
                
                if (branchId > 0) {
                    // Add to table model
                Object[] rowData = {
                    branchTableModel.getRowCount() + 1,
                        fields[0].getText(), // Branch Code
                        fields[1].getText(), // Branch Name
                        fields[2].getText(), // Location
                        fields[3].getText(), // Contact Number
                        fields[4].getText(), // Email
                        "" // Action column
                };
                branchTableModel.addRow(rowData);
                
                    // Show success message and close dialog
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                    "Branch added successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    dialog.dispose();
                } else {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Failed to add branch. Please try again.",
                        "Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private String generateBranchCode() {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder code = new StringBuilder();
        java.util.Random rnd = new java.util.Random();
        for (int i = 0; i < 15; i++) {
            code.append(chars.charAt(rnd.nextInt(chars.length())));
        }
        return code.toString();
    }

    private class ParcelActionColumnRenderer implements javax.swing.table.TableCellRenderer {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public ParcelActionColumnRenderer() {
            panel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            panel.add(editButton);
            panel.add(deleteButton);
        }

        @Override
        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            return panel;
        }
    }

    private class ParcelActionColumnEditor extends javax.swing.AbstractCellEditor implements javax.swing.table.TableCellEditor {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public ParcelActionColumnEditor() {
            panel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            editButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    int row = parcelsTable.getSelectedRow();
                    if (row != -1) {
                        row = parcelsTable.convertRowIndexToModel(row);
                        showEditParcelDialog(row);
                        fireEditingStopped();
                    }
                }
            });

            deleteButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    int row = parcelsTable.getSelectedRow();
                    if (row != -1) {
                        row = parcelsTable.convertRowIndexToModel(row);
                        int confirm = javax.swing.JOptionPane.showConfirmDialog(
                            Dashboard.this,
                            "Are you sure you want to delete this parcel?",
                            "Confirm Delete",
                            javax.swing.JOptionPane.YES_NO_OPTION,
                            javax.swing.JOptionPane.WARNING_MESSAGE
                        );
                        
                        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                            parcelsTableModel.removeRow(row);
                            // Update row numbers
                            for (int i = 0; i < parcelsTableModel.getRowCount(); i++) {
                                parcelsTableModel.setValueAt(i + 1, i, 0);
                            }
                            javax.swing.JOptionPane.showMessageDialog(
                                Dashboard.this,
                                "Parcel deleted successfully!",
                                "Success",
                                javax.swing.JOptionPane.INFORMATION_MESSAGE
                            );
                        }
                        fireEditingStopped();
                    }
                }
            });

            panel.add(editButton);
            panel.add(deleteButton);
        }

        @Override
        public java.awt.Component getTableCellEditorComponent(javax.swing.JTable table, Object value,
                boolean isSelected, int row, int column) {
            return panel;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
    }

    private void showEditParcelDialog(int row) {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Edit Parcel", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {"Reference Number:", "Sender:", "Recipient:", "Status:"};
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length - 1]; // Excluding status
        
        // Reference Number (disabled)
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new javax.swing.JLabel(labels[0]), gbc);
        
        gbc.gridx = 1;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        fields[0] = new javax.swing.JTextField(parcelsTableModel.getValueAt(row, 1).toString());
        fields[0].setEnabled(false);
        mainPanel.add(fields[0], gbc);
        
        // Other text fields
        String[] values = {
            "", // Reference Number already added
            parcelsTableModel.getValueAt(row, 2).toString(), // Sender
            parcelsTableModel.getValueAt(row, 3).toString(), // Recipient
        };
        
        for (int i = 1; i < labels.length - 1; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i] = new javax.swing.JTextField(values[i]);
            mainPanel.add(fields[i], gbc);
        }

        // Status dropdown
        gbc.gridx = 0;
        gbc.gridy = labels.length - 1;
        mainPanel.add(new javax.swing.JLabel(labels[labels.length - 1]), gbc);

        gbc.gridx = 1;
        String[] statuses = {"Pending", "In Transit", "Delivered"};
        javax.swing.JComboBox<String> statusCombo = new javax.swing.JComboBox<>(statuses);
        statusCombo.setSelectedItem(parcelsTableModel.getValueAt(row, 4).toString());
        mainPanel.add(statusCombo, gbc);
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate fields
                for (int i = 1; i < fields.length; i++) {  // Skip reference number
                    if (fields[i].getText().trim().isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                            "All fields are required.",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                // Update row in table
                parcelsTableModel.setValueAt(fields[1].getText(), row, 2); // Sender
                parcelsTableModel.setValueAt(fields[2].getText(), row, 3); // Recipient
                parcelsTableModel.setValueAt(statusCombo.getSelectedItem(), row, 4); // Status
                
                // Close dialog
                dialog.dispose();
                
                // Show success message
                javax.swing.JOptionPane.showMessageDialog(Dashboard.this,
                    "Parcel updated successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private void showAddParcelDialog() {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Add New Parcel", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {"Reference Number:", "Sender:", "Recipient:", "Status:"};
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length - 1]; // Excluding status
        
        // Reference Number (auto-generated)
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new javax.swing.JLabel(labels[0]), gbc);
        
        gbc.gridx = 1;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        String refNumber = generateParcelRefNumber();
        javax.swing.JTextField refField = new javax.swing.JTextField(refNumber);
        refField.setEnabled(false);
        mainPanel.add(refField, gbc);
        
        // Other text fields
        for (int i = 1; i < labels.length - 1; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i-1] = new javax.swing.JTextField(20);
            mainPanel.add(fields[i-1], gbc);
        }
        
        // Status dropdown
        gbc.gridx = 0;
        gbc.gridy = labels.length - 1;
        mainPanel.add(new javax.swing.JLabel(labels[labels.length - 1]), gbc);
        
        gbc.gridx = 1;
        String[] statuses = {"Pending", "In Transit", "Delivered"};
        javax.swing.JComboBox<String> statusCombo = new javax.swing.JComboBox<>(statuses);
        mainPanel.add(statusCombo, gbc);
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate fields
                for (javax.swing.JTextField field : fields) {
                    if (field.getText().trim().isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                            "All fields are required.",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                // Add new row to table
                Object[] rowData = {
                    parcelsTableModel.getRowCount() + 1,
                    refNumber,
                    fields[0].getText(), // Sender
                    fields[1].getText(), // Recipient
                    statusCombo.getSelectedItem(),
                    ""  // Action column
                };
                parcelsTableModel.addRow(rowData);
                
                // Close dialog
                dialog.dispose();
                
                // Show success message
                javax.swing.JOptionPane.showMessageDialog(Dashboard.this,
                    "Parcel added successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private String generateParcelRefNumber() {
        // Generate a random reference number in format PCLxxxxx where x is a digit
        java.util.Random random = new java.util.Random();
        StringBuilder sb = new StringBuilder("PCL");
        for (int i = 0; i < 5; i++) {
            sb.append(random.nextInt(10));
        }
        return sb.toString();
    }

    private class StaffActionColumnRenderer implements javax.swing.table.TableCellRenderer {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public StaffActionColumnRenderer() {
            panel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            panel.add(editButton);
            panel.add(deleteButton);
        }

        @Override
        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            return panel;
        }
    }

    private class StaffActionColumnEditor extends javax.swing.DefaultCellEditor {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public StaffActionColumnEditor() {
            super(new javax.swing.JTextField());
            panel = new javax.swing.JPanel();
            panel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            
            editButton.addActionListener(e -> {
                    int row = staffTable.getSelectedRow();
                    if (row != -1) {
                    row = staffTable.convertRowIndexToModel(row);
                    showEditStaffDialog(row);
                }
                fireEditingStopped();
            });
            
            deleteButton.addActionListener(e -> {
                int row = staffTable.getSelectedRow();
                if (row != -1) {
                    row = staffTable.convertRowIndexToModel(row);
                    
                    // Get staff ID from table model
                    String staffId = (String) staffTableModel.getValueAt(row, 1);
                    
                    // Confirm deletion
                        int confirm = javax.swing.JOptionPane.showConfirmDialog(
                            Dashboard.this,
                            "Are you sure you want to delete this staff member?",
                        "Confirm Deletion",
                            javax.swing.JOptionPane.YES_NO_OPTION,
                            javax.swing.JOptionPane.WARNING_MESSAGE
                        );
                        
                        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                        // Delete from database
                        nepxpress.dao.StaffDAO staffDAO = new nepxpress.dao.StaffDAO();
                        nepxpress.model.Staff staff = staffDAO.getStaffByStaffId(staffId);
                        
                        if (staff != null) {
                            boolean deleted = staffDAO.deleteStaff(staff.getId());
                            
                            if (deleted) {
                                // Remove from table model
                            staffTableModel.removeRow(row);
                                
                            // Update row numbers
                            for (int i = 0; i < staffTableModel.getRowCount(); i++) {
                                staffTableModel.setValueAt(i + 1, i, 0);
                            }
                                
                                javax.swing.JOptionPane.showMessageDialog(
                                    Dashboard.this,
                                    "Staff member deleted successfully!",
                                    "Success",
                                    javax.swing.JOptionPane.INFORMATION_MESSAGE
                                );
                            } else {
                                javax.swing.JOptionPane.showMessageDialog(
                                    Dashboard.this,
                                    "Failed to delete staff member.",
                                    "Error",
                                    javax.swing.JOptionPane.ERROR_MESSAGE
                                );
                            }
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(
                                Dashboard.this,
                                "Staff member not found in database.",
                                "Error",
                                javax.swing.JOptionPane.ERROR_MESSAGE
                            );
                            
                            // Still remove from table if not in database
                            staffTableModel.removeRow(row);
                            
                            // Update row numbers
                            for (int i = 0; i < staffTableModel.getRowCount(); i++) {
                                staffTableModel.setValueAt(i + 1, i, 0);
                            }
                        }
                    }
                }
                fireEditingStopped();
            });

            panel.add(editButton);
            panel.add(deleteButton);
            
            setClickCountToStart(1);
        }

        @Override
        public java.awt.Component getTableCellEditorComponent(javax.swing.JTable table, Object value,
                boolean isSelected, int row, int column) {
            return panel;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
    }

    private void showEditStaffDialog(int row) {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Edit Staff", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {
            "Staff ID:", 
            "First Name:", 
            "Last Name:", 
            "Email:", 
            "Phone:", 
            "Branch:", 
            "Role:"
        };
        
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length - 1]; // Excluding Role which will be a combo box
        
        // Staff ID (disabled)
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new javax.swing.JLabel(labels[0]), gbc);
        
        gbc.gridx = 1;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        fields[0] = new javax.swing.JTextField(staffTableModel.getValueAt(row, 1).toString());
        fields[0].setEnabled(false);
        mainPanel.add(fields[0], gbc);
        
        // Other text fields
        for (int i = 1; i < labels.length - 1; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i] = new javax.swing.JTextField(staffTableModel.getValueAt(row, i + 1).toString());
            mainPanel.add(fields[i], gbc);
        }
        
        // Role combo box
        gbc.gridx = 0;
        gbc.gridy = labels.length - 1;
        mainPanel.add(new javax.swing.JLabel(labels[labels.length - 1]), gbc);
        
        gbc.gridx = 1;
        String[] roles = {"Branch Manager", "Staff", "Delivery Personnel"};
        javax.swing.JComboBox<String> roleCombo = new javax.swing.JComboBox<>(roles);
        roleCombo.setSelectedItem(staffTableModel.getValueAt(row, 7).toString());
        mainPanel.add(roleCombo, gbc);
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate fields
                for (int i = 1; i < fields.length; i++) {  // Skip staff ID
                    String value = fields[i].getText().trim();
                    if (value.isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                            "All fields are required.",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                // Validate email
                String email = fields[3].getText().trim();
                if (!validateEmail(email)) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Please enter a valid Gmail address.",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Validate phone number
                String phone = fields[4].getText().trim();
                if (!validatePhoneNumber(phone)) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Please enter a valid 10-digit phone number.",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Update row in staff table
                staffTableModel.setValueAt(fields[0].getText(), row, 1); // Staff ID
                staffTableModel.setValueAt(fields[1].getText(), row, 2); // First Name
                staffTableModel.setValueAt(fields[2].getText(), row, 3); // Last Name
                staffTableModel.setValueAt(fields[3].getText(), row, 4); // Email
                staffTableModel.setValueAt(fields[4].getText(), row, 5); // Phone
                staffTableModel.setValueAt(fields[5].getText(), row, 6); // Branch
                staffTableModel.setValueAt(roleCombo.getSelectedItem(), row, 7); // Role
                
                // Show success message and close dialog
                javax.swing.JOptionPane.showMessageDialog(dialog,
                    "Staff member updated successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
                dialog.dispose();
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private boolean validatePhoneNumber(String phone) {
        // Remove any non-digit characters
        String digits = phone.replaceAll("\\D", "");
        return digits.length() == 10;
    }

    private boolean validateEmail(String email) {
        return email.toLowerCase().endsWith("@gmail.com");
    }

    private void showAddStaffDialog() {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Add New Staff", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {
            "Staff ID:", 
            "First Name:", 
            "Last Name:", 
            "Email:", 
            "Phone:", 
            "Branch:", 
            "Role:"
        };
        
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length - 2]; // Excluding Branch and Role which will be combo boxes
        
        // Staff ID (auto-generated and disabled)
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new javax.swing.JLabel(labels[0]), gbc);
        
        gbc.gridx = 1;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        
        // Generate staff ID using StaffDAO
        nepxpress.dao.StaffDAO staffDAO = new nepxpress.dao.StaffDAO();
        String staffId = staffDAO.generateStaffId();
        
        fields[0] = new javax.swing.JTextField(staffId);
        fields[0].setEnabled(false);
        mainPanel.add(fields[0], gbc);
        
        // Other text fields
        for (int i = 1; i < labels.length - 2; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i] = new javax.swing.JTextField(20);
            mainPanel.add(fields[i], gbc);
        }
        
        // Branch combo box
        gbc.gridx = 0;
        gbc.gridy = labels.length - 2;
        mainPanel.add(new javax.swing.JLabel(labels[labels.length - 2]), gbc);
        
        gbc.gridx = 1;
        
        // Get branches from database
        nepxpress.dao.BranchDAO branchDAO = new nepxpress.dao.BranchDAO();
        java.util.List<nepxpress.model.Branch> branches = branchDAO.getActiveBranches();
        
        // Create branch combo box
        javax.swing.JComboBox<nepxpress.model.Branch> branchCombo = new javax.swing.JComboBox<>();
        for (nepxpress.model.Branch branch : branches) {
            branchCombo.addItem(branch);
        }
        mainPanel.add(branchCombo, gbc);
        
        // Role combo box
        gbc.gridx = 0;
        gbc.gridy = labels.length - 1;
        mainPanel.add(new javax.swing.JLabel(labels[labels.length - 1]), gbc);
        
        gbc.gridx = 1;
        String[] roles = {"Branch Manager", "Staff", "Delivery Personnel"};
        javax.swing.JComboBox<String> roleCombo = new javax.swing.JComboBox<>(roles);
        mainPanel.add(roleCombo, gbc);
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate input
                if (fields[1].getText().isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                        "First name is required",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                
                if (fields[2].getText().isEmpty()) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Last name is required",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (fields[3].getText().isEmpty() || !validateEmail(fields[3].getText())) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Please enter a valid email address",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (fields[4].getText().isEmpty() || !validatePhoneNumber(fields[4].getText())) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Please enter a valid phone number",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (branchCombo.getSelectedItem() == null) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Please select a branch",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Check if email already exists
                if (staffDAO.isEmailExists(fields[3].getText(), null)) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Email already exists. Please use a different email.",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Create Staff object
                nepxpress.model.Staff staff = new nepxpress.model.Staff();
                staff.setStaffId(fields[0].getText());
                staff.setFirstName(fields[1].getText());
                staff.setLastName(fields[2].getText());
                staff.setEmail(fields[3].getText());
                staff.setPhone(fields[4].getText());
                
                // Get selected branch
                nepxpress.model.Branch selectedBranch = (nepxpress.model.Branch) branchCombo.getSelectedItem();
                staff.setBranchId(selectedBranch.getId());
                staff.setBranchName(selectedBranch.getBranchName());
                
                staff.setRole((String) roleCombo.getSelectedItem());
                
                // Save to database
                int staffId = staffDAO.insertStaff(staff);
                
                if (staffId > 0) {
                    // Add to table model
                Object[] rowData = {
                    staffTableModel.getRowCount() + 1,
                    fields[0].getText(), // Staff ID
                    fields[1].getText(), // First Name
                    fields[2].getText(), // Last Name
                    fields[3].getText(), // Email
                    fields[4].getText(), // Phone
                        selectedBranch.getBranchName(), // Branch
                    roleCombo.getSelectedItem(), // Role
                    "" // Action column
                };
                staffTableModel.addRow(rowData);
                
                // Show success message and close dialog
                javax.swing.JOptionPane.showMessageDialog(dialog,
                    "Staff member added successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
                dialog.dispose();
                } else {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Failed to add staff member. Please try again.",
                        "Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private void setupTrackParcelsContent() {
        trackParcelsContent = new javax.swing.JPanel();
        trackParcelsContent.setLayout(new java.awt.BorderLayout());
        trackParcelsContent.setBackground(java.awt.Color.WHITE);

        // Centered panel
        JPanel centerPanel = new JPanel(new GridBagLayout());
        centerPanel.setBackground(Color.WHITE);

        // Box panel
        JPanel boxPanel = new JPanel(new GridBagLayout());
        boxPanel.setBackground(Color.WHITE);
        boxPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createLineBorder(new Color(200, 200, 200)),
            javax.swing.BorderFactory.createEmptyBorder(30, 30, 30, 30)
        ));

        JLabel label = new JLabel("Enter Tracking Number");
        label.setFont(new Font("Arial", Font.BOLD, 18));
        JTextField trackingField = new JTextField(18);
        JButton searchButton = new JButton();
        searchButton.setPreferredSize(new Dimension(40, 30));
        searchButton.setBackground(new Color(33, 150, 243));
        // Set a search icon if available
        try {
            javax.swing.ImageIcon originalIcon = new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"));
            java.awt.Image scaledImage = originalIcon.getImage().getScaledInstance(18, 18, java.awt.Image.SCALE_SMOOTH);
            searchButton.setIcon(new javax.swing.ImageIcon(scaledImage));
        } catch (Exception e) {
            searchButton.setText("\uD83D\uDD0D"); // Unicode magnifier fallback
        }

        // Add ActionListener to show parcel details
        searchButton.addActionListener(e -> {
            String trackingNumber = trackingField.getText().trim();
            if (trackingNumber.isEmpty()) {
                JOptionPane.showMessageDialog(trackParcelsContent, "Please enter a tracking number.", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
            // TODO: Replace with actual database lookup
            String details = "Parcel Details for: " + trackingNumber + "\nStatus: In Transit\nSender: John Doe\nRecipient: Jane Smith";
            JOptionPane.showMessageDialog(trackParcelsContent, details, "Parcel Details", JOptionPane.INFORMATION_MESSAGE);
        });

        // Add components to boxPanel
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(0, 10, 0, 10);
        gbc.gridx = 0; gbc.gridy = 0;
        boxPanel.add(label, gbc);
        gbc.gridx = 1;
        boxPanel.add(trackingField, gbc);
        gbc.gridx = 2;
        boxPanel.add(searchButton, gbc);

        // Center the boxPanel in centerPanel
        centerPanel.add(boxPanel);

        // Add to main content
        trackParcelsContent.removeAll();
        trackParcelsContent.add(centerPanel, BorderLayout.CENTER);
        trackParcelsContent.revalidate();
        trackParcelsContent.repaint();
        // Add to card layout if not already
        if (contentPanel != null) {
            contentPanel.add(trackParcelsContent, "trackparcels");
        }
    }

    private void showTrackingResult(String trackingNumber) {
        // Create dialog for tracking result
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Tracking Details", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.BorderLayout(20, 20));
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        mainPanel.setBackground(java.awt.Color.WHITE);
        
        // Create tracking details panel
        javax.swing.JPanel detailsPanel = new javax.swing.JPanel(new java.awt.GridBagLayout());
        detailsPanel.setBackground(java.awt.Color.WHITE);
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 15);
        
        // Add tracking details
        String[][] details = {
            {"Tracking Number:", trackingNumber},
            {"Status:", "In Transit"},
            {"Current Location:", "Branch 1"},
            {"Destination:", "Branch 2"},
            {"Estimated Delivery:", "2-3 Business Days"},
            {"Last Updated:", "Today, 10:30 AM"}
        };
        
        for (int i = 0; i < details.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.gridwidth = 1;
            gbc.weightx = 0;
            
            javax.swing.JLabel label = new javax.swing.JLabel(details[i][0]);
            label.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12));
            detailsPanel.add(label, gbc);
            
            gbc.gridx = 1;
            gbc.weightx = 1;
            
            javax.swing.JLabel value = new javax.swing.JLabel(details[i][1]);
            value.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            detailsPanel.add(value, gbc);
        }
        
        // Add tracking timeline
        javax.swing.JPanel timelinePanel = new javax.swing.JPanel();
        timelinePanel.setLayout(new javax.swing.BoxLayout(timelinePanel, javax.swing.BoxLayout.Y_AXIS));
        timelinePanel.setBackground(java.awt.Color.WHITE);
        timelinePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
            javax.swing.BorderFactory.createEmptyBorder(),
            "Tracking Timeline",
            javax.swing.border.TitledBorder.LEFT,
            javax.swing.border.TitledBorder.TOP,
            new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14)
        ));
        
        String[][] timeline = {
            {"Today, 10:30 AM", "Package in transit to destination"},
            {"Today, 09:15 AM", "Package picked up by courier"},
            {"Today, 08:30 AM", "Package processed at origin facility"}
        };
        
        for (String[] event : timeline) {
            javax.swing.JPanel eventPanel = new javax.swing.JPanel(new java.awt.BorderLayout(10, 0));
            eventPanel.setBackground(java.awt.Color.WHITE);
            eventPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 0));
            
            javax.swing.JLabel timeLabel = new javax.swing.JLabel(event[0]);
            timeLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12));
            
            javax.swing.JLabel descLabel = new javax.swing.JLabel(event[1]);
            descLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            
            eventPanel.add(timeLabel, java.awt.BorderLayout.WEST);
            eventPanel.add(descLabel, java.awt.BorderLayout.CENTER);
            
            timelinePanel.add(eventPanel);
        }
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        buttonPanel.setBackground(java.awt.Color.WHITE);
        
        javax.swing.JButton closeButton = new javax.swing.JButton("Close");
        closeButton.setBackground(new java.awt.Color(0, 123, 255));
        closeButton.setForeground(java.awt.Color.WHITE);
        closeButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 15, 5, 15));
        closeButton.addActionListener(e -> dialog.dispose());
        
        buttonPanel.add(closeButton);
        
        // Add panels to main panel
        mainPanel.add(detailsPanel, java.awt.BorderLayout.NORTH);
        mainPanel.add(timelinePanel, java.awt.BorderLayout.CENTER);
        mainPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Add main panel to dialog
        dialog.add(mainPanel);
        
        // Set dialog properties
        dialog.setSize(500, 400);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    // Helper method to create consistent sidebar buttons
    private javax.swing.JButton createSidebarButton(String text, java.awt.Color defaultColor, java.awt.Color hoverColor, java.awt.Color activeColor) {
        javax.swing.JButton button = new javax.swing.JButton(text);
        button.setForeground(java.awt.Color.WHITE);
        button.setBackground(defaultColor);
        button.setFont(new java.awt.Font("Arial", java.awt.Font.PLAIN, 16));
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        button.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
        button.setMaximumSize(new java.awt.Dimension(250, 50));
        button.setPreferredSize(new java.awt.Dimension(250, 50));
        
        // Custom styling with left padding (30px by default, will be adjusted for Staff)
        button.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        
        // Set consistent padding for all buttons
        button.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 30, 10, 0));
        
        // Hover effect
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent e) {
                if (button.getBackground() != activeColor) {
                    button.setBackground(hoverColor);
                }
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent e) {
                if (button.getBackground() != activeColor) {
                    button.setBackground(defaultColor);
                }
            }
        });
        
        // Special handling for Branch Staff button
        if (text.equals("Branch") || text.equals("Branch Staff")) {
            // Change button text to Branch Staff
            button.setText("Branch Staff");
            
            // Create a custom dropdown arrow icon
            javax.swing.Icon dropdownIcon = new javax.swing.Icon() {
                @Override
                public void paintIcon(java.awt.Component c, java.awt.Graphics g, int x, int y) {
                    java.awt.Graphics2D g2d = (java.awt.Graphics2D) g.create();
                    g2d.setRenderingHint(java.awt.RenderingHints.KEY_ANTIALIASING, 
                                         java.awt.RenderingHints.VALUE_ANTIALIAS_ON);
                    g2d.setColor(java.awt.Color.WHITE);
                    int[] xPoints = {x, x + 8, x + 4};
                    int[] yPoints = {y, y, y + 4};
                    g2d.fillPolygon(xPoints, yPoints, 3);
                    g2d.dispose();
                }
                
                @Override
                public int getIconWidth() {
                    return 8;
                }
                
                @Override
                public int getIconHeight() {
                    return 4;
                }
            };
            
                         // Add the dropdown icon
             button.setIcon(dropdownIcon);
             button.setIconTextGap(8);
             button.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
            
            // Create popup menu for Branch Staff options
            javax.swing.JPopupMenu branchMenu = new javax.swing.JPopupMenu();
            branchMenu.setBackground(new java.awt.Color(16, 42, 67));
            branchMenu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 85, 115), 1));
            
            // Create menu items with custom styling
            javax.swing.JMenuItem addNewItem = createMenuItem("Add New", new java.awt.Color(28, 66, 98), new java.awt.Color(40, 90, 130));
            javax.swing.JMenuItem listAllItem = createMenuItem("List All", new java.awt.Color(28, 66, 98), new java.awt.Color(40, 90, 130));
            
            // Add arrow indicators to menu items
            addNewItem.setIcon(createArrowIcon());
            listAllItem.setIcon(createArrowIcon());
            
            // Add action listeners to the menu items
            addNewItem.addActionListener(e -> {
                showAddBranchDialog();
            });
            
            listAllItem.addActionListener(e -> {
                ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "branch");
            });
            
            // Add items to the popup menu
            branchMenu.add(addNewItem);
            branchMenu.add(listAllItem);
            
            // Show popup menu when button is clicked
            button.addActionListener(e -> {
                branchMenu.show(button, 0, button.getHeight());
            });
            
            return button;
        }
        
        // Click handler for other buttons
        button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Set all buttons to default color
                dashboardButton.setBackground(defaultColor);
                branchButton.setBackground(defaultColor);
                staffButton.setBackground(defaultColor);
                parcelsButton.setBackground(defaultColor);
                trackparcelsButton.setBackground(defaultColor);
                
                // Set clicked button to active color
                button.setBackground(activeColor);
                
                // Show appropriate panel
                if (button == dashboardButton) {
                    // Show dashboard content
                    ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "dashboard");
                    
                    // Ensure content is visible
                    dashboardContent.revalidate();
                    dashboardContent.repaint();
                    contentPanel.revalidate();
                    contentPanel.repaint();
                } else if (button == staffButton) {
                    // Either show staff list or add new staff
                    int choice = javax.swing.JOptionPane.showOptionDialog(
                        Dashboard.this,
                        "Staff Management",
                        "Choose an option",
                        javax.swing.JOptionPane.YES_NO_OPTION,
                        javax.swing.JOptionPane.QUESTION_MESSAGE,
                        null,
                        new String[] {"List All Staff", "Add New Staff"},
                        "List All Staff"
                    );
                    
                    if (choice == 0) {
                        // Show staff list
                        ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "stafflist");
                    } else if (choice == 1) {
                        // Show add staff dialog
                        showAddStaffDialog();
                    }
                } else if (button == parcelsButton) {
                    ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "parcels");
                } else if (button == trackparcelsButton) {
                    // Use a darker highlight color for Track Parcels to match image
                    button.setBackground(new java.awt.Color(30, 57, 76));
                    // Show track parcels panel
                    ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "trackparcels");
                }
            }
        });
        
        return button;
    }
    
    private javax.swing.JMenuItem createMenuItem(String text, java.awt.Color defaultColor, java.awt.Color hoverColor) {
        javax.swing.JMenuItem menuItem = new javax.swing.JMenuItem(text);
        menuItem.setFont(new java.awt.Font("Arial", java.awt.Font.PLAIN, 16));
        menuItem.setForeground(java.awt.Color.WHITE);
        menuItem.setBackground(defaultColor);
        menuItem.setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 30, 12, 25));
        menuItem.setIconTextGap(10);
        menuItem.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        
        // Add hover effect
        menuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent e) {
                menuItem.setBackground(hoverColor);
            }
            
            @Override
            public void mouseExited(java.awt.event.MouseEvent e) {
                menuItem.setBackground(defaultColor);
            }
        });
        
        return menuItem;
    }

    private javax.swing.Icon createArrowIcon() {
        return new javax.swing.Icon() {
            @Override
            public void paintIcon(java.awt.Component c, java.awt.Graphics g, int x, int y) {
                java.awt.Graphics2D g2d = (java.awt.Graphics2D) g.create();
                g2d.setRenderingHint(java.awt.RenderingHints.KEY_ANTIALIASING, 
                                    java.awt.RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(java.awt.Color.WHITE);
                int[] xPoints = {x, x, x + 4};
                int[] yPoints = {y, y + 8, y + 4};
                g2d.fillPolygon(xPoints, yPoints, 3);
                g2d.dispose();
            }
            
            @Override
            public int getIconWidth() {
                return 4;
            }
            
            @Override
            public int getIconHeight() {
                return 8;
            }
        };
    }

    // Main method to run the Dashboard directly
    public static void main(String[] args) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        java.awt.EventQueue.invokeLater(() -> {
            Dashboard dashboard = new Dashboard();
            dashboard.setVisible(true);
        });
    }

    // Add rider approval panel method
    // Helper method to update the main content panel
    // Helper to highlight the active sidebar button
    private void highlightSidebarButton(javax.swing.JButton activeButton) {
        java.awt.Color primaryColor = new java.awt.Color(16, 42, 67);
        java.awt.Color activeColor = new java.awt.Color(40, 90, 130);
        dashboardButton.setBackground(primaryColor);
        branchButton.setBackground(primaryColor);
        staffButton.setBackground(primaryColor);
        parcelsButton.setBackground(primaryColor);
        trackparcelsButton.setBackground(primaryColor);
        riderApprovalButton.setBackground(primaryColor);
        if (activeButton != null) activeButton.setBackground(activeColor);
    }

    // Helper to switch main panel via CardLayout
    private void switchMainPanel(String cardName, javax.swing.JButton activeButton) {
        // First, reset all buttons to default style
        java.awt.CardLayout cardLayout = (java.awt.CardLayout) contentPanel.getLayout();
        
        // Switch to the selected panel
        cardLayout.show(contentPanel, cardName);
        
        // Highlight the active button
        highlightSidebarButton(activeButton);
    }
    
    // Persistent panel for Rider Approvals
    private JPanel riderApprovalContent;
    private void showRiderApprovalPanel() {
        // Only update content, do not recreate panel or re-add to CardLayout
        riderApprovalContent.removeAll();
        riderApprovalContent.setLayout(new BorderLayout());
        riderApprovalContent.setBackground(Color.WHITE);
        riderApprovalContent.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Add title
        JLabel titleLabel = new JLabel("Rider Registration Approvals");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 20, 0));
        riderApprovalContent.add(titleLabel, BorderLayout.NORTH);

        // Fetch pending rider registrations
        RiderDAO riderDAO = new RiderDAO();
        List<RiderInfo> pendingRiders = riderDAO.getPendingRiders();
        System.out.println("UI pending riders count: " + pendingRiders.size());
        for (RiderInfo rider : pendingRiders) {
            System.out.println("UI Rider: " + rider.getId() + ", " + rider.getFullName() + ", " + rider.getEmailOrMobile());
        }

        // Create main content panel
        JPanel contentPanel = new JPanel();
        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
        contentPanel.setBackground(Color.WHITE);
        
        if (pendingRiders.isEmpty()) {
            JLabel noRidersLabel = new JLabel("No pending rider registrations found");
            noRidersLabel.setHorizontalAlignment(JLabel.CENTER);
            noRidersLabel.setFont(new Font("Arial", Font.ITALIC, 14));
            riderApprovalContent.add(noRidersLabel, BorderLayout.CENTER);
        } else {
            // Add each rider as a panel with approve/reject buttons
            for (RiderInfo rider : pendingRiders) {
                JPanel riderPanel = createRiderPanel(rider);
                contentPanel.add(riderPanel);
                contentPanel.add(Box.createVerticalStrut(20));
            }
            
            // Add content panel to scroll pane
            JScrollPane scrollPane = new JScrollPane(contentPanel);
            scrollPane.setBorder(BorderFactory.createEmptyBorder());
            riderApprovalContent.add(scrollPane, BorderLayout.CENTER);
        }
        
        // Add refresh button
        JButton refreshButton = new JButton("Refresh");
        refreshButton.addActionListener(e -> showRiderApprovalPanel());
        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        bottomPanel.add(refreshButton);
        riderApprovalContent.add(bottomPanel, BorderLayout.SOUTH);
        
        riderApprovalContent.revalidate();
        riderApprovalContent.repaint();
        switchMainPanel("rider_approval", riderApprovalButton);
    }
    
    private JPanel createRiderPanel(RiderInfo rider) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        panel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(Color.LIGHT_GRAY),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        
        // Rider info panel
        JPanel infoPanel = new JPanel(new GridLayout(3, 2, 10, 5));
        infoPanel.setBackground(Color.WHITE);
        
        infoPanel.add(new JLabel("Name:"));
        infoPanel.add(new JLabel(rider.getFullName()));
        
        infoPanel.add(new JLabel("Contact:"));
        infoPanel.add(new JLabel(rider.getEmailOrMobile()));
        
        infoPanel.add(new JLabel("Vehicle:"));
        infoPanel.add(new JLabel(rider.getVehicleType() + " (" + rider.getVehicleRegistration() + ")"));
        
        panel.add(infoPanel, BorderLayout.CENTER);
        
        // Action buttons
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setBackground(Color.WHITE);
        
        JButton approveButton = new JButton("Approve");
        approveButton.setBackground(new Color(76, 175, 80));
        approveButton.setForeground(Color.WHITE);
        approveButton.setBorderPainted(false);
        approveButton.setFocusPainted(false);
        approveButton.addActionListener(e -> approveRider(rider.getId(), rider.getEmailOrMobile()));
        
        JButton rejectButton = new JButton("Reject");
        rejectButton.setBackground(new Color(244, 67, 54));
        rejectButton.setForeground(Color.WHITE);
        rejectButton.setBorderPainted(false);
        rejectButton.setFocusPainted(false);
        rejectButton.addActionListener(e -> rejectRider(rider.getId(), rider.getEmailOrMobile()));
        
        buttonPanel.add(approveButton);
        buttonPanel.add(rejectButton);
        
        panel.add(buttonPanel, BorderLayout.SOUTH);
        
        return panel;
    }
    
    // Method to approve a rider
    private void approveRider(int riderId, String contactInfo) {
        RiderDAO riderDAO = new RiderDAO();
        boolean success = riderDAO.updateRiderStatus(riderId, "Active");
        if (success) {
            try {
                if (contactInfo.contains("@")) {
                    EmailUtil.sendEmail(
                        contactInfo,
                        "Rider Registration Approved",
                        "Congratulations! Your rider registration has been approved. You can now log in to your account and start accepting deliveries."
                    );
                }
                JOptionPane.showMessageDialog(this,
                    "Rider approved successfully! Notification has been sent.",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
                showRiderApprovalPanel();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                    "Rider approved but failed to send notification: " + e.getMessage(),
                    "Partial Success",
                    JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                "Failed to approve rider. Please try again.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Method to reject a rider
    private void rejectRider(int riderId, String contactInfo) {
        RiderDAO riderDAO = new RiderDAO();
        boolean success = riderDAO.updateRiderStatus(riderId, "Suspended");
        if (success) {
            try {
                if (contactInfo.contains("@")) {
                    EmailUtil.sendEmail(
                        contactInfo,
                        "Rider Registration Not Approved",
                        "We regret to inform you that your rider registration has not been approved at this time. Please contact support for more information."
                    );
                }
                JOptionPane.showMessageDialog(this,
                    "Rider rejected successfully! Notification has been sent.",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
                showRiderApprovalPanel();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                    "Rider rejected but failed to send notification: " + e.getMessage(),
                    "Partial Success",
                    JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                "Failed to reject rider. Please try again.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
}
