/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.courier.ui;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.sql.*;

/**
 *
 * @author kabin
 */
public class ComplaintsFrame extends JFrame {
    private JTextField parcelNumberField;
    private JTextField natureField;
    private JTextArea descriptionArea;
    private JButton submitButton;
    private Connection conn;

    /**
     * Creates new form Java
     */
    public ComplaintsFrame() {
        setTitle("nepXpress â€” Complaints");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setSize(1280, 720);
        setLocationRelativeTo(null);
        setupUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }// </editor-fold>//GEN-END:initComponents

    private void setupUI() {
        // Main container with padding
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(Color.WHITE);

        // Header panel with title
        JPanel headerPanel = new JPanel();
        headerPanel.setLayout(new BoxLayout(headerPanel, BoxLayout.Y_AXIS));
        headerPanel.setBackground(Color.WHITE);
        headerPanel.setBorder(new EmptyBorder(16, 25, 16, 25));

        JLabel complaintsTitle = new JLabel("Complaints");
        complaintsTitle.setFont(new Font("SansSerif", Font.BOLD, 24));
        complaintsTitle.setAlignmentX(Component.LEFT_ALIGNMENT);
        headerPanel.add(complaintsTitle);
        
        JSeparator separator = new JSeparator();
        separator.setMaximumSize(new Dimension(Integer.MAX_VALUE, 1));
        separator.setForeground(new Color(200, 200, 200));
        headerPanel.add(Box.createVerticalStrut(8));
        headerPanel.add(separator);

        mainPanel.add(headerPanel, BorderLayout.NORTH);

        // Form Panel
        JPanel formPanel = new JPanel();
        formPanel.setLayout(new BoxLayout(formPanel, BoxLayout.Y_AXIS));
        formPanel.setBackground(Color.WHITE);
        formPanel.setBorder(new EmptyBorder(20, 25, 20, 25));

        // Title "RAISE TICKETS"
        JLabel raiseTicketsLabel = new JLabel("RAISE TICKETS");
        raiseTicketsLabel.setFont(new Font("SansSerif", Font.BOLD, 32));
        raiseTicketsLabel.setForeground(new Color(242, 140, 72)); // Orange color
        raiseTicketsLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        formPanel.add(Box.createVerticalStrut(20));
        formPanel.add(raiseTicketsLabel);
        formPanel.add(Box.createVerticalStrut(40));

        // Form fields panel
        JPanel fieldsPanel = new JPanel();
        fieldsPanel.setLayout(new BoxLayout(fieldsPanel, BoxLayout.Y_AXIS));
        fieldsPanel.setBackground(Color.WHITE);
        fieldsPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        fieldsPanel.setMaximumSize(new Dimension(600, Integer.MAX_VALUE));

        // Parcel Number Field
        parcelNumberField = createStyledTextField("Enter Parcel Number");
        fieldsPanel.add(parcelNumberField);
        fieldsPanel.add(Box.createVerticalStrut(20));

        // Nature of Complaints Field
        natureField = createStyledTextField("Nature of Complaints");
        fieldsPanel.add(natureField);
        fieldsPanel.add(Box.createVerticalStrut(20));

        // Description Text Area
        descriptionArea = new JTextArea();
        descriptionArea.setFont(new Font("SansSerif", Font.PLAIN, 14));
        descriptionArea.setLineWrap(true);
        descriptionArea.setWrapStyleWord(true);
        descriptionArea.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200)),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        descriptionArea.setRows(8);
        JScrollPane scrollPane = new JScrollPane(descriptionArea);
        scrollPane.setMaximumSize(new Dimension(Integer.MAX_VALUE, 200));
        descriptionArea.setText("Describe Your Issue");
        descriptionArea.setForeground(Color.GRAY);

        fieldsPanel.add(scrollPane);
        fieldsPanel.add(Box.createVerticalStrut(30));

        // Submit Button
        submitButton = new JButton("Submit");
        submitButton.setBackground(new Color(242, 140, 72)); // Orange color
        submitButton.setForeground(Color.WHITE);
        submitButton.setFont(new Font("SansSerif", Font.BOLD, 14));
        submitButton.setPreferredSize(new Dimension(120, 40));
        submitButton.setBorderPainted(false);
        submitButton.setFocusPainted(false);
        submitButton.setAlignmentX(Component.CENTER_ALIGNMENT);

        // Button Panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.setBackground(Color.WHITE);
        buttonPanel.add(submitButton);
        
        fieldsPanel.add(buttonPanel);
        formPanel.add(fieldsPanel);
        mainPanel.add(formPanel, BorderLayout.CENTER);

        setContentPane(mainPanel);

        // Add action listener for submit button
        submitButton.addActionListener(e -> handleSubmit());
    }

    private void handleSubmit() {
        String parcelNumber = parcelNumberField.getText().trim();
        String nature = natureField.getText().trim();
        String description = descriptionArea.getText().trim();
        
        // Validate input
        if (parcelNumber.isEmpty() || parcelNumber.equals("Enter Parcel Number") ||
            nature.isEmpty() || nature.equals("Nature of Complaints") ||
            description.isEmpty() || description.equals("Describe Your Issue")) {
            JOptionPane.showMessageDialog(this,
                "Please fill in all fields",
                "Error",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            conn = DatabaseConnection.getConnection();
            if (conn != null) {
                // First, verify if the parcel exists
                String checkParcelQuery = "SELECT parcel_id FROM parcels WHERE tracking_number = ?";
                PreparedStatement checkStmt = conn.prepareStatement(checkParcelQuery);
                checkStmt.setString(1, parcelNumber);
                ResultSet rs = checkStmt.executeQuery();

                if (!rs.next()) {
                    JOptionPane.showMessageDialog(this,
                        "Invalid parcel number. Please enter a valid tracking number.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int parcelId = rs.getInt("parcel_id");
                rs.close();
                checkStmt.close();

                // Insert the complaint
                String insertQuery = "INSERT INTO complaints (parcel_id, user_id, nature, description, status) " +
                                   "VALUES (?, ?, ?, ?, 'pending')";
                PreparedStatement insertStmt = conn.prepareStatement(insertQuery);
                insertStmt.setInt(1, parcelId);
                insertStmt.setInt(2, 1); // TODO: Replace with actual logged-in user ID
                insertStmt.setString(3, nature);
                insertStmt.setString(4, description);
                
                int result = insertStmt.executeUpdate();
                insertStmt.close();

                if (result > 0) {
                    JOptionPane.showMessageDialog(this,
                        "Complaint submitted successfully!",
                        "Success",
                        JOptionPane.INFORMATION_MESSAGE);
                    clearForm();
                } else {
                    JOptionPane.showMessageDialog(this,
                        "Failed to submit complaint",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                "Database error: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        } finally {
            DatabaseConnection.closeConnection(conn);
        }
    }

    private JTextField createStyledTextField(String placeholder) {
        JTextField field = new JTextField(placeholder);
        field.setFont(new Font("SansSerif", Font.PLAIN, 14));
        field.setForeground(Color.GRAY);
        field.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200)),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        field.setMaximumSize(new Dimension(Integer.MAX_VALUE, 40));

        field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (field.getText().equals(placeholder)) {
                    field.setText("");
                    field.setForeground(Color.BLACK);
                }
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                if (field.getText().isEmpty()) {
                    field.setText(placeholder);
                    field.setForeground(Color.GRAY);
                }
            }
        });

        return field;
    }

    private void clearForm() {
        parcelNumberField.setText("Enter Parcel Number");
        parcelNumberField.setForeground(Color.GRAY);
        natureField.setText("Nature of Complaints");
        natureField.setForeground(Color.GRAY);
        descriptionArea.setText("Describe Your Issue");
        descriptionArea.setForeground(Color.GRAY);
    }

    public JPanel getMainPanel() {
        return (JPanel) getContentPane();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        EventQueue.invokeLater(() -> {
            new ComplaintsFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
